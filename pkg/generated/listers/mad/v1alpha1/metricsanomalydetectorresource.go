/*
Copyright 2023 The Kubernetes mad Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/rexagod/mad/pkg/apis/mad/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MetricsAnomalyDetectorResourceLister helps list MetricsAnomalyDetectorResources.
// All objects returned here must be treated as read-only.
type MetricsAnomalyDetectorResourceLister interface {
	// List lists all MetricsAnomalyDetectorResources in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MetricsAnomalyDetectorResource, err error)
	// MetricsAnomalyDetectorResources returns an object that can list and get MetricsAnomalyDetectorResources.
	MetricsAnomalyDetectorResources(namespace string) MetricsAnomalyDetectorResourceNamespaceLister
	MetricsAnomalyDetectorResourceListerExpansion
}

// metricsAnomalyDetectorResourceLister implements the MetricsAnomalyDetectorResourceLister interface.
type metricsAnomalyDetectorResourceLister struct {
	indexer cache.Indexer
}

// NewMetricsAnomalyDetectorResourceLister returns a new MetricsAnomalyDetectorResourceLister.
func NewMetricsAnomalyDetectorResourceLister(indexer cache.Indexer) MetricsAnomalyDetectorResourceLister {
	return &metricsAnomalyDetectorResourceLister{indexer: indexer}
}

// List lists all MetricsAnomalyDetectorResources in the indexer.
func (s *metricsAnomalyDetectorResourceLister) List(selector labels.Selector) (ret []*v1alpha1.MetricsAnomalyDetectorResource, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MetricsAnomalyDetectorResource))
	})
	return ret, err
}

// MetricsAnomalyDetectorResources returns an object that can list and get MetricsAnomalyDetectorResources.
func (s *metricsAnomalyDetectorResourceLister) MetricsAnomalyDetectorResources(namespace string) MetricsAnomalyDetectorResourceNamespaceLister {
	return metricsAnomalyDetectorResourceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MetricsAnomalyDetectorResourceNamespaceLister helps list and get MetricsAnomalyDetectorResources.
// All objects returned here must be treated as read-only.
type MetricsAnomalyDetectorResourceNamespaceLister interface {
	// List lists all MetricsAnomalyDetectorResources in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MetricsAnomalyDetectorResource, err error)
	// Get retrieves the MetricsAnomalyDetectorResource from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.MetricsAnomalyDetectorResource, error)
	MetricsAnomalyDetectorResourceNamespaceListerExpansion
}

// metricsAnomalyDetectorResourceNamespaceLister implements the MetricsAnomalyDetectorResourceNamespaceLister
// interface.
type metricsAnomalyDetectorResourceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MetricsAnomalyDetectorResources in the indexer for a given namespace.
func (s metricsAnomalyDetectorResourceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.MetricsAnomalyDetectorResource, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MetricsAnomalyDetectorResource))
	})
	return ret, err
}

// Get retrieves the MetricsAnomalyDetectorResource from the indexer for a given namespace and name.
func (s metricsAnomalyDetectorResourceNamespaceLister) Get(name string) (*v1alpha1.MetricsAnomalyDetectorResource, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("metricsanomalydetectorresource"), name)
	}
	return obj.(*v1alpha1.MetricsAnomalyDetectorResource), nil
}
